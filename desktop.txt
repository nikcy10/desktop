
KMEANS

import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

x = [1,2,3,4,5,6]
y = [1,2,3,4,5,6]
plt.scatter(x,y)
plt.show()

data = list(zip(x,y))
kmeans = KMeans(n_clusters=3)
kmeans.fit(data)
plt.scatter(x,y, c=kmeans.labels_)
plt.show()

BAYES

from sklearn.datasets import load_iris
iris = load_iris()

X = iris.data
y = iris.target

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=1)

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(X_train, y_train)

y_pred = gnb.predict(X_test)

from sklearn import metrics
print("Gaussian Naive Bayes model accuracy(in %):", metrics.accuracy_score(y_test, y_pred)*100)

SVM

import matplotlib.pyplot as plt
import numpy as np
X_train=np.array([[3, 1],[3, -1],[6, 1],[6, -1],[1,0],[0,1],[0,-1],[-1,0],[2,3],[2,-3]])
y_train=[1, 1 ,1, 1, 0, 0, 0, 0, 0, 0]
plt.scatter(X_train[:,0], X_train[:,1])
from sklearn import svm
clf = svm.SVC(kernel='linear')
clf = clf.fit(X_train, y_train)
predictions = clf.predict(X_train)
print(predictions)
predictions = clf.predict([[-4,2]])
print(predictions)
support_vectors = clf.support_vectors_
print(support_vectors)
from  sklearn.metrics import classification_report, confusion_matrix
predictions = clf.predict(X_train)
cm = confusion_matrix(y_train, predictions)
print(cm)






















